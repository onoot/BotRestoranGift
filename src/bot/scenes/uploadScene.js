const { Scenes } = require('telegraf');
const { User } = require('../../db/database');
const { checkSubcs, confirmReceipt, backToMain } = require('../keyboards/keyboards');

const uploadScene = new Scenes.BaseScene('upload_scene');

uploadScene.enter(async (ctx) => {
  const userId = ctx.from.id;
  const user = await User.findOne({ where: { telegramId: userId } });
  if (!user) {
    await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start');
    return ctx.scene.leave();
  }

  ctx.session.userSubscribe = user.subscribe;
  ctx.session.receiptData = {};
  await ctx.reply(
    'üì∑–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∏–ª–∏ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ (—á–µ–∫ –≤—ã–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ—Å–µ—â–µ–Ω–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –Ø–ª—Ç–∞, –∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏—è ‚Äî –µ—Å–ª–∏ –≤—ã –æ—Ñ–æ—Ä–º–ª—è–ª–∏ –¥–æ—Å—Ç–∞–≤–∫—É)',
    backToMain
  );
});

uploadScene.on('photo', async (ctx) => {
  const photo = ctx.message.photo.slice(-1)[0];
  const fileId = photo.file_id;
  const filePath = await ctx.telegram.getFileLink(fileId);
  const localPath = `./temp_${Date.now()}_${ctx.from.id}.jpg`;

  const response = await fetch(filePath);
  const arrayBuffer = await response.arrayBuffer();
  require('fs').writeFileSync(localPath, Buffer.from(arrayBuffer));

  ctx.session.receiptData.photoPath = localPath;
  await ctx.reply('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–µ–∫–∞/–∫–≤–∏—Ç–∞–Ω—Ü–∏–∏‚§µÔ∏è', backToMain);
  ctx.scene.state.next = 'orderId';
});

uploadScene.on('text', async (ctx) => {
  if (!ctx.scene.state?.next) {
    return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞!');
  }

  if (ctx.scene.state.next === 'orderId') {
    ctx.session.receiptData.orderId = ctx.message.text.trim();
    ctx.scene.state.next = 'amount';
    return ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–µ–∫–∞/–∫–≤–∏—Ç–∞–Ω—Ü–∏–∏‚§µÔ∏è', backToMain);
  }

  if (ctx.scene.state.next === 'amount') {
    const amountStr = ctx.message.text.replace(',', '.').trim();
    const amount = parseFloat(amountStr);
    if (isNaN(amount) || amount <= 0) {
      return ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
    ctx.session.receiptData.amount = amount;

    const isSubscribed = ctx.session.userSubscribe;

    if (isSubscribed) {
      await ctx.reply(
        `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${ctx.session.receiptData.orderId}\n–°—É–º–º–∞: ${amount} —Ä—É–±.`,
        confirmReceipt
      );
      return ctx.scene.leave();
    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥–ø–∏—Å–∫–∏, –ù–û –ù–ï –∑–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω—É
      await ctx.reply(
        'üîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–¥–ø–∏—Å–∞–Ω—ã –ª–∏ –í—ã –Ω–∞ –Ω–∞—à—É –≥—Ä—É–ø–ø—É –í–ö–æ–Ω—Ç–∞–∫—Ç–µ!',
        checkSubcs
      );
      // –û—Å—Ç–∞—ë–º—Å—è –≤ —Å—Ü–µ–Ω–µ ‚Äî –æ–∂–∏–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
      // –î–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ‚Äî –≤ uploadScene.action('check_subscription')
      return; // –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω—É!
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" –í–ù–£–¢–†–ò —Å—Ü–µ–Ω—ã
uploadScene.action('check_subscription', async (ctx) => {
  const userId = ctx.from.id;
  const user = await User.findOne({ where: { telegramId: userId } });

  if (!user) {
    await ctx.answerCbQuery('‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start', { show_alert: true });
    return ctx.scene.leave();
  }

  // –î–æ–≤–µ—Ä—è–µ–º ‚Äî —Å—Ç–∞–≤–∏–º subscribe = true
  await user.update({ subscribe: true });

  await ctx.answerCbQuery('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!', { show_alert: true });

  // –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ–∫–∞, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
  if (ctx.session.receiptData?.orderId && ctx.session.receiptData?.amount) {
    const amount = ctx.session.receiptData.amount;
    await ctx.reply(
      `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${ctx.session.receiptData.orderId}\n–°—É–º–º–∞: ${amount} —Ä—É–±.`,
      confirmReceipt
    );
  } else {
    await ctx.reply('‚ùå –î–∞–Ω–Ω—ã–µ —á–µ–∫–∞ —É—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.', backToMain);
  }

  return ctx.scene.leave();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
uploadScene.action('back_to_main', async (ctx) => {
  if (ctx.session?.receiptData?.photoPath) {
    try {
      require('fs').unlinkSync(ctx.session.receiptData.photoPath);
    } catch (e) {}
  }
  ctx.session.receiptData = undefined;
  await ctx.reply('‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', backToMain);
  return ctx.scene.leave();
});

module.exports = uploadScene;